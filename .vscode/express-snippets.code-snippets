{
	// Place your Рабочая область lessions-monitoring-system snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Empty Router": {
		"scope": "javascript, typescript",
		"prefix": "router",
		"body": [
			"import { Router } from 'express';\n",
			"const router = Router()\n",
			"$0\n",
			"export default router"
		]
	},

	"Service": {
		"scope": "javascript, typescript",
		"prefix": "service",
		"body": [
			"import { PrismaClient } from '@prisma/client'\n",
			"const prisma = new PrismaClient()\n",
			"export const $0fn = async () => {\n",
			"\t$1",
			"}"
		]
	},

	"Controller": {
		"scope": "typescript",
		"prefix": "controller",
		"body": [
			"import { Request, Response, NextFunction } from 'express';\n",
			"export default async (req: Request, res: Response, next: NextFunction) => {",
			"\ttry { $0 }",
			"\tcatch(err) {",
			"\t\tnext(err)",
			"\t}",
			"}"
		]
	}

	/**
	import { Request, Response, NextFunction } from 'express';

export default async (req: Request, res: Response, next: NextFunction) => {
    try {  }
    catch(err) {
        next(err)
    }
}
	*/
}